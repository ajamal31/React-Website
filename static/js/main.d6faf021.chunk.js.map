{"version":3,"sources":["weatherLogo.png","App.js","reportWebVitals.js","index.js"],"names":["App","city","countryCode","url","useState","weather","setWeather","icon","setIcon","time","setTime","fetch","then","response","json","data","temperature","Math","round","temp","iconUrl","dateTime","Date","toLocaleString","catch","error","console","log","className","style","color","src","weatherLogo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAe,MAA0B,wC,MCgD1BA,MA5Cf,WACE,IAAIC,EAAO,WACPC,EAAc,SAEZC,EAAG,4DAAwDF,EAAxD,YAAgEC,EAAhE,+BADM,oCAHF,EAKiBE,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMWF,mBAAS,MANpB,mBAMNG,EANM,KAMAC,EANA,OAOWJ,mBAAS,IAPpB,mBAONK,EAPM,KAOAC,EAPA,KAuBb,OAdAC,MAAMR,GACHS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAcC,KAAKC,MAAMH,EAAI,KAASI,MACtCC,EAAO,2CAAuCL,EAAI,QAAY,GAAGR,KAA1D,WACPc,EAAW,IAAIC,KAAkB,IAAbP,EAAI,IAAeQ,iBAC3CjB,EAAWU,GACXR,EAAQY,GACRV,EAAQW,MAETG,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAId,qBAAKG,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8BACE,qBAAIC,MAAO,CAAEC,MAAO,cAApB,gCACsB,GACpB,qBAAKF,UAAU,WAAWG,IAAKC,EAAaC,IAAI,UAGpD,qBAAKF,IAAKxB,EAAM0B,IAAI,KACpB,oBAAGJ,MAAO,CAAEC,MAAO,UAAnB,UAAgCzB,EAAhC,WAEA,oBAAGwB,MAAO,CAAEC,MAAO,aAAnB,UACG7B,EADH,KACWC,KAEX,mBAAG2B,MAAO,CAAEC,MAAO,aAAnB,SAAmCrB,UC9B5ByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6faf021.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weatherLogo.bbb8057a.png\";","import React, { useState } from \"react\";\nimport weatherLogo from \"./weatherLogo.png\";\nimport \"./App.css\";\n\nfunction App() {\n  var city = \"Edmonton\";\n  var countryCode = \"Canada\";\n  const apiKey = \"cecfe61da45b46b0ff77615eed1fd730\";\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&units=metric&appid=${apiKey}`;\n  const [weather, setWeather] = useState(\"\");\n  const [icon, setIcon] = useState(null);\n  const [time, setTime] = useState(\"\");\n\n  fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      var temperature = Math.round(data[\"main\"].temp);\n      var iconUrl = `http://openweathermap.org/img/wn/${data[\"weather\"][0].icon}@2x.png`;\n      var dateTime = new Date(data[\"dt\"] * 1000).toLocaleString();\n      setWeather(temperature);\n      setIcon(iconUrl);\n      setTime(dateTime);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h3 style={{ color: \"lightgreen\" }}>\n            Arun's Weather App {\"\"}\n            <img className=\"App-logo\" src={weatherLogo} alt=\"\" />\n          </h3>\n        </div>\n        <img src={icon} alt=\"\" />\n        <b style={{ color: \"orange\" }}>{weather}Â°C</b>\n\n        <p style={{ color: \"lightpink\" }}>\n          {city}, {countryCode}\n        </p>\n        <b style={{ color: \"lightblue\" }}>{time}</b>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}